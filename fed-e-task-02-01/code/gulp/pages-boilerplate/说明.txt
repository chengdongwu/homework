首先需要安装gulp
yarn add gulp --dev

编译scss 需要安装 gulp-sass
yarn add gulp-sass --dev

src 的第二个参数可以传参{base: 'src'} ,使生成的dist文件的目录和源目录结构保持一致
sass 的第一个参数可以加入{ outputStyle: 'expanded'}. 使生成的css全面展开

运行style 命令
yarn gulp style

转换js
安装gulp-babel 
yarn add gulp-babel --dev
安装 @babel/core @babel/preset-env
yarn add @babel/core @babel/preset-env --dev
在pipe 添加babel 方法 pipe(babel({ presets : ['@babel/preset-env']}))

运行 js 命令
yarn gulp script 

编译页面模板
安装 gulp-swig
yarn add gulp-swig --dev
需要写需要插入模板的对象值 data 
const data = {
    pkg: require('./package.json'),
    date: new Date()
}
swig({data})

运行 编译模板命令
yarn gulp page 

可以使用异步模式一起编译css js html
引入parallel
const complile = parallel(style, script, page)

编译 complile 
yarn gulp complile

图片和文字转换
yarn add gulp-imagemin --dev
.pipe(imagemin())

const complile = parallel(style, script, page, image, font)

使用 gulp-load-plugins 自动加载插件可以不需要手动引入插件
const loadPlugins = require('gulp-load-plugins')

const plugins = loadPlugins()
使用插件 plugins. 插件名就行 例如 plugins.sass


开发服务器
yarn add browser-sync --dev
const plugins = loadPlugins()
const bs = browserSync.create()

const server = ()=>{
    bs.init({
        notify: false,
        port: 2080,
        files: 'dist/**',
        server: {
            baseDir: 'dist',
            routes: {
                '/node_modules': 'node_modules'
            }
        }
    })
}

监听
    watch('src/assets/styles/*.scss', style)
    watch('src/assets/scripts/*.js', script)
    watch('src/*.html', page)
    // watch('src/assets/images/**', image)
    // watch('src/assets/fonts/**', font)
    // watch('public/**', erxtra)

    watch([
        'src/assets/images/**',
        'src/assets/fonts/**s',
        'public/**'
    ], bs.reload)

useref 文件引用
    yarn add gulp-useref --dev
    const useref= () =>{
    return src('dist/*.html', {base: 'dist'})
        .pipe(plugins.useref({searchPath : ['dist', '.']}))
        .pipe(dest('dist'))
}

文件压缩
yarn add gulp-htmlmin gulp-uglify gulp-clean-css --dev
yarn add gulp-if --dev

